[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "alphahome"
version = "1.2" # 您可以根据需要修改版本号
authors = [
  { name="trademaster", email="frederick518@163.com" }, # 请替换为您的信息
]
description = "AlphaHome 数据管理工具"
readme = "README.md" # 假设您有 README.md 文件
requires-python = ">=3.9" # 根据您的项目实际使用的 Python 版本调整
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License", # 假设您选择 MIT 许可证, 如果不同请修改
    "Operating System :: OS Independent",
    "Topic :: Office/Business :: Financial :: Investment",
    "Framework :: Tkinter",
]
dependencies = [
    "aiohttp>=3.12.13",
    "asyncpg>=0.30.0",
    "matplotlib>=3.9.0",
    "numpy>=1.26.0",
    "pandas>=2.2.0",
    "python-dotenv>=1.0.0",
    "tkcalendar>=1.6.0",
    "tqdm>=4.66.0",
    "appdirs>=1.4.4",
    "zipline-reloaded>=3.0.0",
    "tushare>=1.4.0",  # 启用 Tushare 依赖
]

# 定义如何找到您的包
[tool.setuptools.packages.find]
where = ["."] # 在根目录查找
include = ["alphahome", "alphahome.*"]
# exclude = ["tests*"] # 如果您有测试目录，可以排除

# 定义 GUI 启动脚本
[project.scripts]
alphahome = "alphahome.gui.main_window:run_gui" # 当用户安装后，可以运行 alphahome 命令启动 GUI

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["alphahome", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "-v"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "requires_db: Tests that require database connection",
    "requires_api: Tests that require external API access"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["alphahome"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # 暂时关闭，渐进式引入
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "asyncpg.*",
    "psycopg2.*",
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "backtrader.*",
    "tushare.*"
]
ignore_missing_imports = true 